---
version: "3.9"
services:
  mainnetwork:
    image: alpine:3.14.0
    command: ["tail", "-f", "/dev/null"]
    ports:
      - 80:80
      - 443:443
      - 5000:5000
      - 5001:5001
  db:
    image: postgres:12-alpine
    restart: unless-stopped
    container_name: db
    volumes:
      - ../db/docker-entrypoint-initdb.d/${INSTANCE_NAME}:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - WAI_DB_PASSWORD=${WAI_DB_PASSWORD}
      - WAI_DB_USER=${WAI_DB_USER}
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    working_dir: /usr/src/app
    command: ["./run.sh"]
    volumes:
      - file-upload:${STORAGE_LOCATION}
    environment:
      - DATABASE_URL=postgresql://${WAI_DB_USER}:${WAI_DB_PASSWORD}@db:5432/${INSTANCE_NAME}
      - INSTANCE_NAME=${INSTANCE_NAME}
      - MAILJET_SECRET=${MAILJET_SECRET}
      - MAILJET_APIKEY=${MAILJET_APIKEY}
      - WEBDOMAIN=${WEBDOMAIN}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_SECRET=${AUTH0_SECRET}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - STORAGE_LOCATION=${STORAGE_LOCATION}
    depends_on:
      db:
        condition: service_healthy
    network_mode: service:mainnetwork

  worker:
    build:
      context: ../backend
      dockerfile: Dockerfile.worker
    container_name: worker
    restart: unless-stopped
    working_dir: /usr/src/app
    command: ["./run-worker.sh"]
    volumes:
      - file-upload:${STORAGE_LOCATION}
    environment:
      - DATABASE_URL=postgresql://${WAI_DB_USER}:${WAI_DB_PASSWORD}@db:5432/${INSTANCE_NAME}
      - INSTANCE_NAME=${INSTANCE_NAME}
      - MAILJET_SECRET=${MAILJET_SECRET}
      - MAILJET_APIKEY=${MAILJET_APIKEY}
      - WEBDOMAIN=${WEBDOMAIN}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_SECRET=${AUTH0_SECRET}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - STORAGE_LOCATION=${STORAGE_LOCATION}
    depends_on:
      db:
        condition: service_healthy
    network_mode: service:mainnetwork

  frontend_build:
    image: akvo/akvo-node-18-alpine:20220923.084347.0558ee6
    container_name: frontend_build
    profiles: ["tools"]
    working_dir: /app
    command:
      - /bin/bash
      - -c
      - |
        echo "PUBLIC_URL=/" > .env
        echo REACT_APP_AUTH0_DOMAIN=${AUTH0_SPA_DOMAIN} >> .env
        echo REACT_APP_AUTH0_CLIENT_ID=${AUTH0_SPA_CLIENT_ID} >> .env
        ./release.prod.sh
    volumes:
      - ../frontend:/app:delegated
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME}
      - AUTH0_SPA_DOMAIN=${AUTH0_SPA_DOMAIN}
      - AUTH0_SPA_CLIENT_ID=${AUTH0_SPA_CLIENT_ID}
      - GENERATE_SOURCEMAP=false
      - NODE_OPTIONS=--max-old-space-size=2048
    network_mode: service:mainnetwork

  documentation_build:
    image: akvo/akvo-sphinx:20220525.082728.594558b
    container_name: documentation_build
    profiles: ["tools"]
    working_dir: /app/docs/${INSTANCE_NAME}
    command:
      - /bin/bash
      - -c
      - |
        pwd && make html
        mkdir -p /app/frontend/build/docs/${INSTANCE_NAME}
        cp -r /app/docs/${INSTANCE_NAME}/build/html /app/frontend/build/docs/${INSTANCE_NAME}
    volumes:
      - ..:/app:delegated
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME}
    network_mode: service:mainnetwork

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME}
    network_mode: service:mainnetwork

  frontend_ssl:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend_ssl
    volumes:
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
      - ./nginx/default.ssl.conf:/etc/nginx/templates/default.conf.template
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME}
      - DOMAIN=${DOMAIN}
    network_mode: service:mainnetwork


  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    profiles: ["tools"]
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    environment:
      - DOMAIN=${DOMAIN}
    network_mode: service:mainnetwork


  nginx_certbot:
    image: nginx:1.21.0-alpine
    container_name: nginx_certbot
    profiles: ["tools"]
    volumes:
      - ./certbot/www:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/nginx/ssl/:rw
      - ./nginx/default.conf:/etc/nginx/templates/default.conf.template
    environment:
      - DOMAIN=${DOMAIN}
    network_mode: service:mainnetwork

  frontend_build_cleanup:
    image: akvo/akvo-node-18-alpine:20220923.084347.0558ee6
    container_name: frontend_build_cleanup
    profiles: ["tools"]
    working_dir: /app
    command:
      - /bin/bash
      - -c
      - |
        rm -rf build yarn-error.log node_modules
    volumes:
      - ../frontend:/app:delegated
    network_mode: service:mainnetwork

  documentation_build_cleanup:
    image: akvo/akvo-sphinx:20220525.082728.594558b
    container_name: documentation_build_cleanup
    profiles: ["tools"]
    working_dir: /app/docs/${INSTANCE_NAME}
    command:
      - /bin/bash
      - -c
      - |
        rm -rf /app/frontend/build/docs/${INSTANCE_NAME}
    volumes:
      - ..:/app:delegated
    environment:
      - INSTANCE_NAME=${INSTANCE_NAME}
    network_mode: service:mainnetwork

  db_backup:
    image: postgres:12-alpine
    container_name: db_backup
    profiles: ["tools"]

volumes:
  pg-data:
  file-upload:
